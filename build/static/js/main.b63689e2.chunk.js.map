{"version":3,"sources":["logo.svg","utils/viewPort.js","Table/index.js","api.js","User/index.js","Post/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","Table","data","columns","rowProps","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","className","map","col","label","d","row","onClick","ev","onClickHandler","getRowProps","accesor","cellValue","cellProps","title","getData","url","a","fetch","method","headers","Headers","Accept","then","res","json","User","username","website","href","React","memo","Post","selectedPost","user","backToHome","body","App","posts","setPosts","users","setUsers","setSelectedPost","loading","setLoading","getPostsData","getUserData","getPostUser","useMemo","filter","u","id","userId","rowData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b63689e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import React from 'react';\nimport './style.css'\nimport useWindowDimensions from '../utils/viewPort';\nfunction getRowProps(rowProps, row) {\n    return {\n        onClick: (ev) => rowProps.onClickHandler(row)\n    }\n}\nfunction Table({data, columns, rowProps}) {\n    const { height, width } = useWindowDimensions();\n    return <div className=\"table-container\"><table className=\"table\">\n    <thead className=\"table-head\">\n        <tr>\n            {columns.map(col => <th><div>{col.label}</div></th>)}\n        </tr>\n    </thead>\n    <tbody className=\"table-body\">\n        {data.map(d => {\n            return <tr {...getRowProps(rowProps, d)}>{columns.map(({accesor, className}) => {\n                const cellValue = accesor && typeof accesor === 'string' ? d[accesor] : accesor(d);\n                const cellProps = {};\n                if(className) {\n                    cellProps.className = className;\n                }\n                return <td {...cellProps} title={cellValue}><div>{cellValue}</div></td>\n            })}</tr>\n        })}\n    </tbody>\n</table></div>\n    \n}\nexport default Table;","\nexport async function getData(url) {\n    return fetch(\n        url,\n        {\n          method: \"GET\",\n          headers: new Headers({\n            Accept: \"application/json\"\n          })\n        }\n      )\n        .then(res => res.json())\n}","import React from 'react';\nimport \"./style.css\"\nfunction User({username, website}){\n    return <div className=\"user\">\n        \n        <div className=\"user-name\"><div className=\"user-image\"></div>{username}</div>\n        <div className=\"website\"><a href={website}>{website}</a></div>\n    </div>\n}\nexport default React.memo(User)","\nimport React from 'react';\nimport User from '../User';\nimport './style.css';\nfunction Post({selectedPost, user, backToHome}) {\n   return <div className=\"container\">\n       <div className=\"back\" onClick={backToHome}><a>Home</a></div>\n       <User {...user}/>\n       <div className=\"post\">\n        <h1 className=\"title\">{selectedPost.title}</h1>\n        <p className=\"body\">{selectedPost.body}</p>\n       </div>\n       \n   </div>\n}\nexport default React.memo(Post)","import { useState, useEffect, useMemo } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport Table from '../Table'\nimport {getData} from '../api'\nimport Post from '../Post'\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPost, setSelectedPost] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function getPostsData() {\n      const posts = await getData('https://jsonplaceholder.typicode.com/posts');\n      setLoading(false);\n      setPosts(posts);\n    }\n    getPostsData();\n  }, []);\n  useEffect(() => {\n    async function getUserData() {\n      const users =  await getData('https://jsonplaceholder.typicode.com/users');\n      setUsers(users);\n    }\n    getUserData();\n  }, []);\n  const getPostUser = useMemo(() => {\n    return users.filter((u) => u.id === selectedPost.userId)\n  },[users, selectedPost]);\n  const backToHome = () => setSelectedPost({})\n  return (\n    <div className=\"App\">\n      {!selectedPost.id && <>{loading ? <div>Loading Users...</div> : <Table data={posts} rowProps={{onClickHandler: (rowData) => {\n        setSelectedPost(rowData)\n      }}} columns={[{label:'Id', accesor:'id'},{label:\"User id\", accesor: 'userId'} ,{label: 'Title',accesor:'title', className: 'title'}]}/>}\n      </>}\n      {selectedPost.id &&\n        <Post selectedPost={selectedPost} user={getPostUser[0]} backToHome={backToHome}/>\n      }   \n           \n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n          <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}